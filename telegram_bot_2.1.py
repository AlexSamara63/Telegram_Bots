import datetime
import logging
from telegram import ReplyKeyboardMarkup, KeyboardButton, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —á–µ—Ç–Ω—ã–º
def is_even_day(date):
    return date.day % 2 == 0


# –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
def get_schedule_for_date(date):
    weekday = date.weekday()

    # –ü—è—Ç–Ω–∏—Ü–∞ - –æ—Å–æ–±–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if weekday == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
        return "12.00-15.30"

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    if weekday < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥
        if is_even_day(date):
            return "8.00-11.30"
        else:
            return "16.00-19.30"

    # –í—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    return "–≤—ã—Ö–æ–¥–Ω–æ–π"


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –ø—Ä–∏–µ–º
def is_work_time_now():
    now = datetime.datetime.now()
    schedule = get_schedule_for_date(now)

    # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π - –ø—Ä–∏–µ–º–∞ –Ω–µ—Ç
    if schedule == "–≤—ã—Ö–æ–¥–Ω–æ–π":
        return False

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    start_str, end_str = schedule.split('-')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Ä–µ–º—è
    def parse_time(time_str):
        parts = time_str.replace('.', ':').split(':')
        hours = int(parts[0])
        minutes = int(parts[1]) if len(parts) > 1 else 0
        return datetime.time(hours, minutes)

    start_time = parse_time(start_str)
    end_time = parse_time(end_str)
    current_time = now.time()

    return start_time <= current_time < end_time


# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã
def get_formatted_schedule(day_offset=0):
    target_date = datetime.datetime.now() + datetime.timedelta(days=day_offset)

    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day_name = days[target_date.weekday()]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: –¥–µ–Ω—å.–º–µ—Å—è—Ü
    date_str = target_date.strftime("%d.%m")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule = get_schedule_for_date(target_date)

    return f"{day_name} ({date_str}): {schedule}"


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é
def get_weekly_schedule(start_offset=0, days_count=7):
    schedule_lines = []
    for i in range(start_offset, start_offset + days_count):
        schedule_lines.append(get_formatted_schedule(i))
    return "\n".join(schedule_lines)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        welcome_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–º–µ–π–Ω—ã–π –±–æ—Ç.\n\n"
            "–°–µ–π—á–∞—Å –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –®–∏—Ä–∏–Ω–æ–π –ù–∞—Ç–∞–ª—å–∏ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω—ã.\n\n"
            "üìÖ –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ:\n\n"
            "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ @aoshirin üòä"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [KeyboardButton("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        ]

        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup
        )

        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        text = update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        if text == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'")
            await start(update, context)
            return

        if text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –ø—Ä–∏–µ–º
            if is_work_time_now():
                status_msg = "‚ùå –ò–¥–µ—Ç –ø—Ä–∏–µ–º"
            else:
                status_msg = "‚úÖ –ü—Ä–∏–µ–º–∞ –Ω–µ—Ç, –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –¥–∞—Ç–æ–π
            schedule_msg = get_formatted_schedule(0)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            full_msg = f"{status_msg}\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{schedule_msg}"
            await update.message.reply_text(full_msg)

        elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'")
            schedule_msg = get_formatted_schedule(1)
            await update.message.reply_text(schedule_msg)

        elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'")
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 7 –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è
            weekly_schedule = get_weekly_schedule(0, 7)
            await update.message.reply_text(weekly_schedule)

        elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é'")
            # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ 7 –¥–Ω–µ–π –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞
            next_week_schedule = get_weekly_schedule(7, 7)
            await update.message.reply_text(next_week_schedule)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif text == "/start":
            await start(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(config.TOKEN).build()

        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        application.run_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()