import datetime
import logging
from telegram import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–µ–Ω—å —á–µ—Ç–Ω—ã–º
def is_even_day(date):
    return date.day % 2 == 0


# –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
def get_schedule_for_date(date):
    weekday = date.weekday()

    # –ü—è—Ç–Ω–∏—Ü–∞ - –æ—Å–æ–±–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if weekday == 4:  # –ü—è—Ç–Ω–∏—Ü–∞
        return "12.00-15.30"

    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    if weekday < 5:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-—á–µ—Ç–≤–µ—Ä–≥
        if is_even_day(date):
            return "8.00-11.30"
        else:
            return "16.00-19.30"

    # –í—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    return "–≤—ã—Ö–æ–¥–Ω–æ–π"


# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å –ø—Ä–∏–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
def get_work_status():
    now = datetime.datetime.now()
    schedule = get_schedule_for_date(now)

    # –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π - –ø—Ä–∏–µ–º–∞ –Ω–µ—Ç
    if schedule == "–≤—ã—Ö–æ–¥–Ω–æ–π":
        return {"status": False, "remaining": None}

    # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    start_str, end_str = schedule.split('-')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Ä–µ–º—è
    def parse_time(time_str):
        parts = time_str.replace('.', ':').split(':')
        hours = int(parts[0])
        minutes = int(parts[1]) if len(parts) > 1 else 0
        return datetime.time(hours, minutes)

    start_time = parse_time(start_str)
    end_time = parse_time(end_str)
    current_time = now.time()

    if start_time <= current_time < end_time:
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        end_datetime = datetime.datetime.combine(now.date(), end_time)
        remaining = end_datetime - now
        hours, remainder = divmod(remaining.seconds, 3600)
        minutes = remainder // 60
        return {
            "status": True,
            "remaining": f"{hours:02d}:{minutes:02d}"
        }
    return {"status": False, "remaining": None}


# –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –¥–Ω—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã
def format_schedule_for_date(target_date):
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    day_name = days[target_date.weekday()]

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É: –¥–µ–Ω—å.–º–µ—Å—è—Ü
    date_str = target_date.strftime("%d.%m")

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule = get_schedule_for_date(target_date)

    return f"{day_name} ({date_str}): {schedule}"


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
def get_current_week_schedule():
    today = datetime.date.today()
    schedule_lines = []

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –æ—Ç —Å–µ–≥–æ–¥–Ω—è –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è)
    for i in range(7 - today.weekday()):
        current_date = today + datetime.timedelta(days=i)
        schedule_lines.append(format_schedule_for_date(current_date))

    return "\n".join(schedule_lines)


# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é
def get_next_week_schedule():
    today = datetime.date.today()
    # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
    next_monday = today + datetime.timedelta(days=(7 - today.weekday()))

    schedule_lines = []
    for i in range(7):
        current_date = next_monday + datetime.timedelta(days=i)
        schedule_lines.append(format_schedule_for_date(current_date))
    return "\n".join(schedule_lines)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {update.effective_user.id}")

        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
        welcome_message = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Å–µ–º–µ–π–Ω—ã–π –±–æ—Ç.\n\n"
            "–°–µ–π—á–∞—Å –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –®–∏—Ä–∏–Ω–æ–π –ù–∞—Ç–∞–ª—å–∏ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω—ã.\n\n"
            "üìÖ –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é –Ω–∏–∂–µ:\n\n"
            "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –ø–∏—à–∏ @aoshirin üòä"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [KeyboardButton("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é")],
            [KeyboardButton("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é")]
        ]

        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            resize_keyboard=True,
            one_time_keyboard=False
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup
        )

        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
async def call_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ Telegram
    phone_number = "+79277985185"
    call_link = f"tg://call?phone={phone_number}"  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å tel: –Ω–∞ tg://call?phone=

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("üï∫ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–≤–æ–Ω–∫–∞", url=call_link)
    ]])

    await query.edit_message_text(
        text="–¢–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω:\n+7 (927) 798-51-85",
        reply_markup=keyboard
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
        text = update.message.text

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"
        if text == "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'")
            await start(update, context)
            return

        if text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.datetime.now()
            schedule_msg = format_schedule_for_date(today)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
            work_status = get_work_status()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if work_status["status"]:
                # –ò–¥–µ—Ç –ø—Ä–∏–µ–º - –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–µ–º—Å—è –≤—Ä–µ–º–µ–Ω–∏
                message = (
                    f"‚ùå –°–µ–π—á–∞—Å –∏–¥–µ—Ç –ø—Ä–∏–µ–º\n"
                    f"–î–æ –∫–æ–Ω—Ü–∞ –ø—Ä–∏–µ–º–∞: {work_status['remaining']}\n\n"
                    f"{schedule_msg}"
                )
                await update.message.reply_text(message)
            else:
                # –ü—Ä–∏–µ–º–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–≤–æ–Ω–∫–∞ (–≤–∫–ª—é—á–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö/—Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
                schedule = get_schedule_for_date(today)
                status_msg = "‚úÖ –°–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–Ω–∏—Ç—å"

                if schedule == "–≤—ã—Ö–æ–¥–Ω–æ–π":
                    status_msg = "‚ÑπÔ∏è –°–µ–≥–æ–¥–Ω—è:"

                message = (
                    f"{status_msg}\n\n"
                    f"{schedule_msg}"
                )
                keyboard = InlineKeyboardMarkup([[
                    InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data="call")
                ]])
                await update.message.reply_text(
                    message,
                    reply_markup=keyboard
                )

        elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞'")
            tomorrow = datetime.datetime.now() + datetime.timedelta(days=1)
            schedule_msg = format_schedule_for_date(tomorrow)
            await update.message.reply_text(schedule_msg)

        elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é'")
            weekly_schedule = get_current_week_schedule()
            await update.message.reply_text(weekly_schedule)

        elif text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é":
            logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é'")
            next_week_schedule = get_next_week_schedule()
            await update.message.reply_text(next_week_schedule)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        elif text == "/start":
            await start(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def main():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(config.TOKEN).build()

        logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(call_button, pattern="^call$"))

        logger.info("–ó–∞–ø—É—Å–∫ polling...")
        application.run_polling()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()